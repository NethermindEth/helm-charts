# Default values for dirk.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  serviceAccount:
    create: true
  # -- Pod Security Context
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  #
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 10000
    fsGroup: 10000

  securityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 10000
    fsGroup: 10000
    capabilities:
      drop:
      - ALL

replicaCount: 3

image:
  repository: attestant/dirk
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: "1.2.0"

# -- Init image is used to chown data volume, etc.
#
initImage:
  repository: bash
  tag: "5.2"
  pullPolicy: IfNotPresent

# -- CLI image is used to fetch private keys.
#
cliImage:
  repository: nethermindeth/keystores-cli
  tag: "v1.0.0"
  pullPolicy: IfNotPresent

externalSecrets:
  enabled: false
  secretStoreRef:
    name: secretStoreRef
    kind: SecretStore
  dataFrom:
    key: dirk

dirk:
  loglevel: Debug
  clientName: client1
  tracing:

  fetchKeysExtraFlags: []

imagePullSecrets: []

# -- Provide a name in place of operator for `app:` labels
#
nameOverride: ""

# -- Provide a name to substitute for the full names of resources
#
fullnameOverride: ""

# -- Sets logging verbosity.
# Log levels are OFF, FATAL, WARN, INFO, DEBUG, TRACE, ALL.
loggingLevel: "INFO"

# -- Port on which dirk HTTP listens.
#
httpPort: 8881

# -- The port (TCP) on which Prometheus accesses metrics
#
metricsPort: 9000

readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  timeoutSeconds: 3
  periodSeconds: 1
  failureThreshold: 3
  successThreshold: 3
  httpGet:
    path: /metrics
    port: metrics
    scheme: HTTP

minReadySeconds: 10

persistence:
  storageClassName: ""
  accessModes:
    - ReadWriteOnce
  size: 1Gi
  annotations: {}

livenessProbe:
  exec:
    command:
      - /bin/bash
      - /scripts/liveness_probe.sh
  periodSeconds: 90
  failureThreshold: 1


# -- ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
#
serviceAccount:
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

service:
  type: ClusterIP
  httpPort: 8881

# -- Configure resource requests and limits.
# ref: http://kubernetes.io/docs/user-guide/compute-resources/
#
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Node labels for pod assignment
# ref: https://kubernetes.io/docs/user-guide/node-selection/
#
nodeSelector: {}

# -- Tolerations for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
#
tolerations: {}

# -- Affinity for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
#
affinity: {}

# -- Prometheus Service Monitor
# ref: https://github.com/coreos/prometheus-operator
#      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
#
serviceMonitor:
  # -- Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator
  #
  enabled: false
  # -- The namespace in which the ServiceMonitor will be created
  #
  namespace: ""
  # -- The interval at which metrics should be scraped
  #
  interval: 30s
  # -- The timeout after which the scrape is ended
  #
  scrapeTimeout: ""
  # -- RelabelConfigs to apply to samples before scraping.
  #
  relabellings: []
  # -- Metrics RelabelConfigs to apply to samples before ingestion.
  #
  metricRelabelings: []
  # -- Specify honorLabels parameter to add the scrape endpoint
  #
  honorLabels: false
  # -- Additional labels that can be used so ServiceMonitor resource(s) can be discovered by Prometheus
  #
  additionalLabels: {}
