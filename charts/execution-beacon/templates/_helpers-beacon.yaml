{{/*
Prysm beacon client arguments
*/}}
{{- define "beacon-args-prysm" -}}
- "--datadir=/data/beacon"
- "--execution-endpoint=http://localhost:{{ .Values.execution.jsonrpc.engine.port }}"
- "--{{ .Values.network }}"
{{- if .Values.beacon.grpc.enabled }}
- "--rpc-host={{ .Values.beacon.grpc.host }}"
- "--rpc-port={{ .Values.beacon.grpc.port }}"
{{- end }}
{{- if .Values.p2pNodePort.enabled }}
- "--config-file=/data/beacon/config.yaml"
{{- else }}
- "--p2p-host-ip=$(POD_IP)"
- "--p2p-tcp-port={{ include "beacon.p2pPort" . }}"
- "--p2p-udp-port={{ include "beacon.p2pPort" . }}"
{{- end }}
- "--p2p-max-peers={{ .Values.beacon.targetPeers }}"
- "--accept-terms-of-use"
{{- if or .Values.JWTSecret .Values.JWTSecretName (and .Values.envFrom (index .Values.envFrom 0).secretRef) }}
- "--jwt-secret=/secret/jwtsecret"
{{- end }}
{{- if .Values.beacon.builderEndpoint }}
- "--http-mev-relay={{ .Values.beacon.builderEndpoint }}"
{{- end }}
{{- if .Values.beacon.suggestedFeeRecipient }}
- "--suggested-fee-recipient={{ .Values.beacon.suggestedFeeRecipient }}"
{{- end }}
{{- if .Values.beacon.totalDifficultyOverride }}
- "--terminal-total-difficulty-override={{ .Values.beacon.totalDifficultyOverride }}"
{{- end }}
{{- if .Values.beacon.checkPointSync.enabled }}
- "--checkpoint-sync-url={{ .Values.beacon.checkPointSync.url }}"
- "--genesis-beacon-api-url={{ .Values.beacon.checkPointSync.url }}"
{{- end }}
{{- if and .Values.metrics.enabled .Values.beacon.metrics.enabled }}
- "--monitoring-port={{ .Values.beacon.metrics.port }}"
- "--monitoring-host={{ .Values.beacon.metrics.host }}"
{{- else }}
- "--disable-monitoring"
{{- end }}
{{- if .Values.beacon.restApi.enabled }}
- "--grpc-gateway-host={{ .Values.beacon.restApi.host }}"
- "--grpc-gateway-port={{ index .Values.beacon.restApi.portMap "prysm" }}"
- "--grpc-gateway-corsdomain={{ .Values.beacon.restApi.corsOrigins | join "," }}"
{{- end }}
{{- if .Values.beacon.proposerOnly }}
- "--subscribe-all-subnets"
{{- end }}
{{- range .Values.beacon.extraFlags }}
- {{ . | quote }}
{{- end }}
{{- end }}

{{/*
Teku beacon client command
*/}}
{{- define "beacon-command-teku" -}}
- sh
- -ac
- >
{{- if .Values.p2pNodePort.enabled }}
  . /env/init-nodeport;
{{- end }}
  exec /opt/teku/bin/teku
  --network={{ .Values.network }}
  --data-beacon-path=/data/beacon/teku
  --data-path=/data/beacon
  --ee-endpoint=http://localhost:{{ .Values.execution.jsonrpc.engine.port }}
{{- if or .Values.JWTSecret .Values.JWTSecretName (and .Values.envFrom (index .Values.envFrom 0).secretRef) }}
  --ee-jwt-secret-file=/secret/jwtsecret
{{- end }}
{{- if .Values.beacon.builderEndpoint }}
  --builder-endpoint={{ .Values.beacon.builderEndpoint }}
{{- end }}
{{- if .Values.beacon.suggestedFeeRecipient }}
  --validators-proposer-default-fee-recipient={{ .Values.beacon.suggestedFeeRecipient }}
{{- end }}
{{- if .Values.beacon.checkPointSync.enabled }}
  --initial-state={{ .Values.beacon.checkPointSync.url }}/eth/v2/debug/beacon/states/finalized
{{- end }}
{{- if .Values.beacon.restApi.enabled }}
  --rest-api-enabled={{ .Values.beacon.restApi.enabled }}
  --rest-api-host-allowlist={{ .Values.beacon.restApi.hostAllowList | join "," }}
  --rest-api-interface={{ .Values.beacon.restApi.host }}
  --rest-api-port={{ index .Values.beacon.restApi.portMap "teku" }}
  --rest-api-cors-origins={{ .Values.beacon.restApi.corsOrigins | join "," }}
{{- end }}
  --p2p-enabled=true
  --p2p-peer-upper-bound={{ .Values.beacon.targetPeers }}
  --p2p-peer-lower-bound={{ .Values.beacon.targetPeersMin }}
{{- if .Values.p2pNodePort.enabled }}
  --p2p-advertised-port=$EXTERNAL_BEACON_PORT
  --p2p-advertised-ip=$EXTERNAL_IP
  --p2p-port=$EXTERNAL_BEACON_PORT
{{- else }}
  --p2p-advertised-ip=$POD_IP
  --p2p-advertised-port={{ include "beacon.p2pPort" . }}
  --p2p-port={{ include "beacon.p2pPort" . }}
{{- end }}
{{- if and .Values.metrics.enabled .Values.beacon.metrics.enabled }}
  --metrics-enabled={{ .Values.beacon.metrics.enabled }}
  --metrics-categories={{ .Values.beacon.metrics.categories | join "," }}
  --metrics-host-allowlist={{ .Values.beacon.metrics.hostAllowList | join "," }}
  --metrics-interface={{ .Values.beacon.metrics.host }}
  --metrics-port={{ .Values.beacon.metrics.port }}
{{- end }}
{{- range .Values.beacon.extraFlags }}
  {{ . | quote }}
{{- end }}
{{- end }}

{{/*
Lighthouse beacon client command
*/}}
{{- define "beacon-command-lighthouse" -}}
- sh
- -ac
- >
{{- if .Values.p2pNodePort.enabled }}
  . /env/init-nodeport;
{{- end }}
  exec lighthouse
  bn
  --staking
{{- if .Values.beacon.proposerOnly }}
  --proposer-only
{{- end }}
  --datadir=/data/beacon
  --network={{ .Values.network }}
  --disable-upnp
  --target-peers={{ .Values.beacon.targetPeers }}
{{- if .Values.beacon.restApi.enabled }}
  --http
  --http-port={{ index .Values.beacon.restApi.portMap "lighthouse" }}
  --http-address={{ .Values.beacon.restApi.host }}
  --http-allow-origin={{ .Values.beacon.restApi.corsOrigins | join "," }}
{{- end }}
{{- if .Values.beacon.checkPointSync.enabled }}
  --checkpoint-sync-url={{ .Values.beacon.checkPointSync.url }}
{{- end }}
{{- if .Values.beacon.builderEndpoint }}
  --builder={{ .Values.beacon.builderEndpoint }}
{{- end }}
{{- if .Values.beacon.suggestedFeeRecipient }}
  --suggested-fee-recipient={{ .Values.beacon.suggestedFeeRecipient }}
{{- end }}
  --execution-endpoint=http://localhost:{{ .Values.execution.jsonrpc.engine.port }}
{{- if or .Values.JWTSecret .Values.JWTSecretName (and .Values.envFrom (index .Values.envFrom 0).secretRef) }}
  --execution-jwt=/secret/jwtsecret
{{- end }}
{{- if .Values.p2pNodePort.enabled }}
  --discovery-port=$EXTERNAL_BEACON_PORT
  --port=$EXTERNAL_BEACON_PORT
{{- else }}
  --discovery-port={{ include "beacon.p2pPort" . }}
  --port={{ include "beacon.p2pPort" . }}
{{- end }}
{{- if and .Values.metrics.enabled .Values.beacon.metrics.enabled }}
  --metrics
  --metrics-port={{ .Values.beacon.metrics.port }}
  --metrics-address={{ .Values.beacon.metrics.host }}
{{- end }}
{{- range .Values.beacon.extraFlags }}
  {{ . }}
{{- end }}
{{- end }}

{{/*
Nimbus beacon client command
*/}}
{{- define "beacon-command-nimbus" -}}
- sh
- -ac
- >
{{- if .Values.p2pNodePort.enabled }}
  . /env/init-nodeport;
{{- end }}
{{- if or (eq .Values.network "gnosis") (eq .Values.network "chiado") }}
  exec /home/user/nimbus_beacon_node
{{- else }}
  exec /home/user/nimbus-eth2/build/nimbus_beacon_node
{{- end }}
  --non-interactive
  --network={{ .Values.network }}
  --data-dir=/data/beacon
  --web3-url=http://localhost:{{ .Values.execution.jsonrpc.engine.port }}
{{- if .Values.jwtSecretEnv }}
  --jwt-secret=${{ .Values.jwtSecretEnv }}
{{- else if .Values.JWTSecret }}
  --jwt-secret=/secret/jwtsecret
{{- end }}
{{- if .Values.beacon.builderEndpoint }}
  --payload-builder=true
  --payload-builder-url={{ .Values.beacon.builderEndpoint }}
{{- end }}
{{- if .Values.beacon.suggestedFeeRecipient }}
  --suggested-fee-recipient={{ .Values.beacon.suggestedFeeRecipient }}
{{- end }}
{{- if .Values.beacon.restApi.enabled }}
  --rest
  --rest-port={{ index .Values.beacon.restApi.portMap "nimbus" }}
  --rest-address={{ .Values.beacon.restApi.host }}
  --rest-allow-origin={{ .Values.beacon.restApi.corsOrigins | join "," }}
{{- end }}
  --max-peers={{ .Values.beacon.targetPeers }}
{{- if .Values.p2pNodePort.enabled }}
  --nat=extip:$EXTERNAL_IP
  --tcp-port=$EXTERNAL_BEACON_PORT
  --udp-port=$EXTERNAL_BEACON_PORT
{{- else }}
  --nat=extip:$POD_IP
  --tcp-port={{ include "beacon.p2pPort" . }}
  --udp-port={{ include "beacon.p2pPort" . }}
{{- end }}
{{- if and .Values.metrics.enabled .Values.beacon.metrics.enabled }}
  --metrics
  --metrics-port={{ .Values.beacon.metrics.port }}
  --metrics-address={{ .Values.beacon.metrics.host }}
{{- end }}
{{- range .Values.beacon.extraFlags }}
  {{ . }}
{{- end }}
{{- end }}

{{/*
Lodestar beacon client command
*/}}
{{- define "beacon-command-lodestar" -}}
- sh
- -ac
- >
{{- if .Values.p2pNodePort.enabled }}
  . /env/init-nodeport;
{{- end }}
  exec node
  /usr/app/node_modules/.bin/lodestar
  beacon
  --dataDir=/data/beacon
  --network={{ .Values.network }}
{{- if .Values.beacon.builderEndpoint }}
  --builder
  --builder.urls={{ .Values.beacon.builderEndpoint }}
{{- end }}
{{- if .Values.beacon.suggestedFeeRecipient }}
  --suggestedFeeRecipient={{ .Values.beacon.suggestedFeeRecipient }}
{{- end }}
{{- if .Values.beacon.checkPointSync.enabled }}
  --checkpointSyncUrl={{ .Values.beacon.checkPointSync.url }}
{{- end }}
{{- if .Values.beacon.restApi.enabled }}
  --rest
  --rest.address={{ .Values.beacon.restApi.host }}
  --rest.port={{ index .Values.beacon.restApi.portMap "lodestar" }}
  --rest.cors={{ .Values.beacon.restApi.corsOrigins | join "," }}
{{- end }}
  --targetPeers={{ .Values.beacon.targetPeers }}
  --execution.urls=http://localhost:{{ .Values.execution.jsonrpc.engine.port }}
{{- if .Values.jwtSecretEnv }}
  --jwt-secret=${{ .Values.jwtSecretEnv }}
{{- else if .Values.JWTSecret }}
  --jwt-secret=/secret/jwtsecret
{{- end }}
{{- if .Values.p2pNodePort.enabled }}
  --nat=true
  --enr.ip=$EXTERNAL_IP
  --enr.tcp=$EXTERNAL_BEACON_PORT
  --enr.udp=$EXTERNAL_BEACON_PORT
  --port=$EXTERNAL_BEACON_PORT
{{- else }}
  --nat=true
  --enr.ip=$POD_IP
  --enr.tcp={{ include "beacon.p2pPort" . }}
  --enr.udp={{ include "beacon.p2pPort" . }}
  --port={{ include "beacon.p2pPort" . }}
{{- end }}
{{- if and .Values.metrics.enabled .Values.beacon.metrics.enabled }}
  --metrics
  --metrics.address={{ .Values.beacon.metrics.host }}
  --metrics.port={{ .Values.beacon.metrics.port }}
{{- end }}
{{- range .Values.beacon.extraFlags }}
  {{ . }}
{{- end }}
{{- end }}
