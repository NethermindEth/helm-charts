############################################
# Generic App
############################################

# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: alpine
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# -- Enable PVC for StatefulSet
persistence:
  enabled: false
  storageClassName: ""
  mountPath: /data
  accessModes:
    - ReadWriteOnce
  size: 10Gi

# -- Command and args for the container
command: []
args: []

# -- config is the most straightforward way to set environment variables for your application, the key/value configmap will be mounted as envs. No need to do any extra configuration.
config: {}
  # ENV_1: value1
  # ENV_2: value2

# -- Extra ConfigMaps, they need to be configured using volumes and volumeMounts
configMaps: []
  # - name: my-configmap
  #   data:
  #     config.yaml: |
  #       db_host: localhost
  #       db_user: db_user

# -- This is for setting container environment variables: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
env: []
  # - name: MY_ENV_VAR
  #   value: my-env-var-value
  # - name: SECRET
  #   valueFrom:
  #     secretKeyRef:
  #       key: SECRET
  #       name: secret-name

# -- envFrom configuration
envFrom:
  []
  # - configMapRef:
  #     name: my-configmap
  # - secretRef:
  #     name: my-secret

# -- InitScript for the pod (Used to get external node ip and port)
initScript: |
  #!/usr/bin/env bash
  echo "Starting init script for pod ${POD_NAME}..."
  touch /shared/env

  echo "Getting external node ip and port..."
  EXTERNAL_NODE_IP=$(kubectl get node $NODE_NAME -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}')
  EXTERNAL_NODE_PORT=$(kubectl get services -l "pod=${POD_NAME},type=p2p" -o jsonpath='{.items[0].spec.ports[0].nodePort}')

  REPLICA_INDEX=$(echo $POD_NAME | awk -F'-' '{print $NF}')

  echo "REPLICA_INDEX=${REPLICA_INDEX}"
  echo "EXTERNAL_NODE_IP=${EXTERNAL_NODE_IP}"
  echo "EXTERNAL_NODE_PORT=${EXTERNAL_NODE_PORT}"

  echo "export REPLICA_INDEX=${REPLICA_INDEX}" >> /shared/env
  echo "export EXTERNAL_NODE_IP=${EXTERNAL_NODE_IP}" >> /shared/env
  echo "export EXTERNAL_NODE_PORT=${EXTERNAL_NODE_PORT}" >> /shared/env

# -- extraInitScript for running additional after the initScript commands
extraInitScript: |
  exit 0

# -- Init containers
initContainers:
  - name: init
    image: bitnami/kubectl:1.28
    command: ["sh", "-c", "/scripts/init.sh"]
    volumeMounts:
      - name: scripts
        mountPath: /scripts
      - name: shared
        mountPath: /shared
    env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            fieldPath: spec.nodeName
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
  # - name: my-init-container
  #   image: busybox
  #   command: ['sh', '-c', 'echo "Hello, World!"']
  #   resources: {}
  #     # limits:
  #     #   cpu: 100m
  #     #   memory: 128Mi
  #     # requests:
  #     #   cpu: 100m
  #     #   memory: 128Mi

# -- Sidecar containers
extraContainers: []
  # - name: my-sidecar
  #   image: "busybox"
  #   imagePullPolicy: IfNotPresent
  #   ports:
  #     - name: http
  #       containerPort: 80
  #       protocol: TCP

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  ports:
    - name: http
      port: 8080
      protocol: TCP

# Creates the NodePort service
p2p:
  enabled: false
  port: 30300
  serviceType: NodePort

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
# -- For now all traffic is routed to the `http` port
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
          # -- Port name as defined in the service.ports section
          portName: http
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe: null
  # httpGet:
  #   path: /
  #   port: http
readinessProbe: null
  # httpGet:
  #   path: /
  #   port: http

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

serviceMonitor:
  # -- If true, a ServiceMonitor CRD is created for a prometheus operator. https://github.com/coreos/prometheus-operator
  enabled: false
  # -- Port name
  port: metrics
  # -- Path to scrape
  path: /metrics
  # -- Alternative namespace for ServiceMonitor
  namespace: null
  # -- Additional ServiceMonitor labels
  labels: {}
  # -- Additional ServiceMonitor annotations
  annotations: {}
  # -- ServiceMonitor scrape interval
  interval: 1m
  # -- ServiceMonitor scheme
  scheme: http
  # -- ServiceMonitor TLS configuration
  tlsConfig: {}
  # -- ServiceMonitor scrape timeout
  scrapeTimeout: 30s
  # -- ServiceMonitor relabelings
  relabelings: []

# Default security settings for the pod
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

# Default security settings for containers
securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault

# Override security context for init containers
initContainerSecurityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  allowPrivilegeEscalation: false
