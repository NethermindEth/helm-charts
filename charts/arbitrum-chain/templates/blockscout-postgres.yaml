{{- if .Values.blockscout.enabled }}
# PostgreSQL StatefulSet for Blockscout
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "arbitrum-orbit-chain.fullname" . }}-blockscout-db
  labels:
    {{- include "arbitrum-orbit-chain.labels" . | nindent 4 }}
    app.kubernetes.io/component: blockscout-database
spec:
  replicas: 1
  serviceName: {{ include "arbitrum-orbit-chain.fullname" . }}-blockscout-db
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "arbitrum-orbit-chain.name" . }}-blockscout-db
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: blockscout-database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "arbitrum-orbit-chain.name" . }}-blockscout-db
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: blockscout-database
    spec:
      initContainers:
        - name: init-permissions
          image: postgres:15
          command:
            - sh
            - -c
            - |
              chown -R 2000:2000 /var/lib/postgresql/data
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          securityContext:
            runAsUser: 0
      containers:
        - name: postgres
          image: postgres:15
          securityContext:
            runAsUser: 2000
            runAsGroup: 2000
          command:
            - postgres
            - -c
            - max_connections=200
            - -c
            - client_connection_check_interval=60000
          env:
            - name: POSTGRES_DB
              value: "blockscout"
            - name: POSTGRES_USER
              value: "blockscout"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "arbitrum-orbit-chain.fullname" . }}-secrets
                  key: BLOCKSCOUT_DB_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - pg_isready -U blockscout -d blockscout
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - pg_isready -U blockscout -d blockscout
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- if .Values.blockscout.postgresql.storageClass }}
        storageClassName: {{ .Values.blockscout.postgresql.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.blockscout.postgresql.primary.persistence.size }}

---

# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: {{ include "arbitrum-orbit-chain.fullname" . }}-blockscout-db
  labels:
    {{- include "arbitrum-orbit-chain.labels" . | nindent 4 }}
    app.kubernetes.io/component: blockscout-database
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: postgres
      protocol: TCP
      name: postgres
  selector:
    app.kubernetes.io/name: {{ include "arbitrum-orbit-chain.name" . }}-blockscout-db
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: blockscout-database
{{- end }}