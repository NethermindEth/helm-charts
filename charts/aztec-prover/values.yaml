# Default values for aztec-prover.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: aztecprotocol/aztec
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "provernet"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

proverNode:
  enabled: true
  name: node
  args:
    - "start"
    - "--prover-node"
    - "--archiver"
  env:
    {}
    # URL to an Ethereum node.
    # ETHEREUM_HOST: "https://provernet-mainnet-fork.aztec.network:8545/$APIKEY"
    # Chain ID for the L1 Ethereum chain.
    # L1_CHAIN_ID: "677692"
    # Local folder where archive and world state data is stored.
    # DATA_DIRECTORY: "/data"
    # Port where the JSON-RPC APIs will be served.
    # AZTEC_PORT: "8080"
    # URL to an Aztec node that acts as transaction provider and as source of truth for the L1 contract addresses.
    # TX_PROVIDER_NODE_URL: "https://api.aztec.network/provernet/aztec-node-1/$APIKEY"
    ####################
    # Common Envs
    ####################
    # Whether to generate actual proofs, as opposed to only simulating the circuit and outputting fake proofs. Set to true for the scope of the integration.
    # PROVER_REAL_PROOFS: "true"
    # Whether to skip consensus checks. Set to true for the scope of the integration.
    # IS_DEV_NET: "true"
    # One of debug, verbose, info, warn, or error.
    # LOG_LEVEL: "debug"
    # Set to true to output logs in ndJSON format (unreleased).
    # LOG_JSON: "false"
    #  Optional URL for pushing telemetry data to a remote OpenTelemetry data collector.
    # OTEL_EXPORTER_OTLP_ENDPOINT: ""

proverAgent:
  enabled: false
  name: agent
  args:
    - "start"
    - "--prover"
  env:
    {}
    # URL to the prover node that acts as a proving job source.
    # AZTEC_NODE_URL: "http://aztec-prover-node:8080"
    # Maximum concurrency for this given prover agent. Defaults to 1.
    # PROVER_AGENTS: "1"
    # ###################
    # Common Envs
    # ###################
    # Whether to generate actual proofs, as opposed to only simulating the circuit and outputting fake proofs. Set to true for the scope of the integration.
    # PROVER_REAL_PROOFS: "true"
    # Whether to skip consensus checks. Set to true for the scope of the integration.
    # IS_DEV_NET: "true"
    # One of debug, verbose, info, warn, or error.
    # LOG_LEVEL: "debug"
    # Set to true to output logs in ndJSON format (unreleased).
    # LOG_JSON: "false"
    #  Optional URL for pushing telemetry data to a remote OpenTelemetry data collector.
    # OTEL_EXPORTER_OTLP_ENDPOINT: ""

extraObjects:
  []
  # - apiVersion: v1
  #   kind: Secret
  #   metadata:
  #     name: '{{ include "aztec-prover.fullname" . }}'
  #   stringData:
  #     PROVER_PUBLISHER_PRIVATE_KEY: "<PRIVATE KEY>"

envFrom:
  []
  # - secretRef:
  #     name: '{{ include "aztec-prover.fullname" . }}'

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /status
    port: http
readinessProbe:
  httpGet:
    path: /status
    port: http

persistence:
  enabled: true
  size: 50Gi
  storageClass: ""
  mountPath: "/data"
  accessModes:
    - "ReadWriteOnce"

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
