{{- template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

{{ template "extra.installation" . }}

{{ template "chart.maintainersSection" . }}

## Usage

Check `values.deploy.yaml` or `values.sts.yaml` for example configuration options.

### Name Override

Always use the `nameOverride` to set the name of the resources.

```yaml
nameOverride: "my-app"
```

### Init Containers or Sidecars

```yaml
initContainers:
  - name: my-init-container
    image: busybox
    command: ['sh', '-c', 'echo "Hello, World!"']
    resources: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

extraContainers:
  - name: my-sidecar
    image: "busybox"
    imagePullPolicy: IfNotPresent
    ports:
      - name: http
        containerPort: 80
        protocol: TCP
```

### Container and Service Ports

This will create both service and container ports configuration. Only http port is required. It will be the default port for the Ingress resource.

```yaml
service:
  ports:
    - name: http
      port: 8080
      protocol: TCP
    - name: metrics
      port: 9090
      protocol: TCP
```

### Ingress

```yaml
ingress:
  enabled: true
  className: "kong"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
          # -- Port name as defined in the service.ports section
          portName: http
  tls:
    - secretName: chart-example-local-tls
      hosts:
        - chart-example.local
```

### Application Configuration

#### ConfigMaps

With the configuration below, the configMap will be automatically mounted as environment variables. If you need config files, check the next section.

```yaml
configMap:
  enabled: true
  data:
    VAR_1: value1
    VAR_2: value2
```

#### Environment Variables

```yaml
env:
  - name: MY_ENV_VAR
    value: my-env-var-value
```

### Config Files

Mounting a ConfigMap as a file is useful when the application expects a configuration file.

```yaml
extraConfigMaps:
  - name: my-configmap
    data:
      config.yaml: |
        db_host: localhost
        db_user: db_user

volumes:
  - name: my-configmap
    configMap:
        name: my-configmap

volumeMounts:
  - name: my-configmap
    mountPath: /etc/config/config.yaml
    subPath: config.yaml
    readOnly: true
```

### Sts Persistence

```yaml
statefulSet:
  enabled: true
  persistence:
    enabled: true
    storageClassName: ""
    mountPath: /data
    accessModes:
      - ReadWriteOnce
    size: 50Gi
```

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}

{{ template "helm-docs.versionFooter" . }}
